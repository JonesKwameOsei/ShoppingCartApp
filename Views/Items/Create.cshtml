@model ShoppingCartApp.Models.Item

@{
    ViewData["Title"] = "Add to Cart";
}

<h1>Add Item to Cart 🛒</h1>

<div class="row">
    <div class="col-md-6">
        <form asp-action="Create" method="post">
            <input type="hidden" asp-for="Id" />

            <div class="form-group mb-3">
                <label asp-for="ProductId" class="control-label"></label>
                <select asp-for="ProductId"
                        class="form-control"
                        asp-items="@(ViewData["ProductId"] as SelectList)"
                        id="productDropdown">
                    <option value="">-- Select Product --</option>
                </select>
                <span asp-validation-for="ProductId" class="text-danger"></span>
            </div>

            <div class="form-group mb-3">
                <label asp-for="Name" class="control-label"></label>
                <input asp-for="Name" class="form-control" id="itemName" />
                <span asp-validation-for="Name" class="text-danger"></span>
            </div>

            <div class="form-group mb-3">
                <label asp-for="Price" class="control-label"></label>
                <input asp-for="Price" class="form-control" id="itemPrice" />
                <span asp-validation-for="Price" class="text-danger"></span>
            </div>

            <div class="form-group mb-3">
                <label asp-for="Quantity" class="control-label"></label>
                <input asp-for="Quantity" class="form-control" value="1" type="number" min="1" />
                <span asp-validation-for="Quantity" class="text-danger"></span>
            </div>

            <div class="form-group mt-3">
                <button type="submit" class="btn btn-primary">
                    <i class="bi bi-cart-plus"></i> Add to Cart
                </button>
                <a asp-action="Index" class="btn btn-primary">
                    <i class="bi bi-list"></i> Back to List
                </a>
                <a asp-controller="Home" asp-action="Index" class="btn btn-secondary">
                    <i class="bi bi-house"></i> Back to Home
                </a>
            </div>
        </form>
    </div>
</div>

<div class="col-md-6">
    <div class="card" id="productPreview" style="display: none">
        <div class="card-header">
            <h5>Product Preview</h5>
        </div>
        <div class="card-body text-center">
            <img id="productImage"
                 src=""
                 alt="Product"
                 class="img-fluid mb-3"
                 style="max-height: 300px; object-fit: contain;" />
            <h6 id="productName" class="text-muted"></h6>
        </div>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const productDropdown = document.getElementById('productDropdown');
            const itemNameInput = document.getElementById('itemName');
            const itemPriceInput = document.getElementById('itemPrice');
            const productPreview = document.getElementById('productPreview');
            const productImage = document.getElementById('productImage');
            const productName = document.getElementById('productName');

            // Add loading spinner HTML
            const loadingSpinner = `
                <div class="spinner-border-sm text-primary role="status">
                    <>span class="visually-hidden">Loading...</span>
                <div>`;

            productDropdown.addEventListener('change', function() {
                const selectedProductId = this.value;

                if (selectedProductId === '') {
                    // Reset fields if no product selected
                    itemNameInput.value = '';
                    itemPriceInput.value = '';
                    productPreview.style.display = 'none';
                    return;
                }

                // Show loading spinner
                itemPriceInput.value = 'Loading...';
                itemNameInput.value = 'Loading...';

                // Fetch product details via AJAX
                fetch(`/items/GetProductDetails/${selectedProductId}`)
                    .then(response => {
                        if (response.ok) {
                            throw new Error('Product not found');
                        }
                        return response.json();
                    })
                    .then(data => {
                        // Populate fields with fetched data
                        itemNameInput.value = data.productName
                        itemPriceInput.value = data.price.toFixed(2);

                        // Update product preview
                        if (data.productImage) {
                            productImage.src = data.productImage;
                            productImage.alt = data.productName;
                            productName.textContent = data.productName;
                            productPreview.style.display = 'block';
                        } else {
                            productPreview.style.display = 'none';
                        }

                        // Optional: Add success feedback
                        itemPriceInput.classList.add('is-valid');
                        itemNameInput.classList.add('is-valid');

                        setTimeout(() => {
                            itemPriceInput.classList.remove('is-valid');
                            itemNameInput.classList.remove('is-valid');
                        }, 2000);
                    })
                    .catch(Error => {
                        console.error('Error fetching product details:', error);

                        // Show error state
                        itemNameInput.value = '';
                        itemPriceInput.value = '';
                        productPreview.style.display = 'none';

                        // Add error feedback
                        itemPriceInput.classList.add('is-invalid');
                        alert('Unable to load product details. Please try again');

                        setTimeout(() => {
                            itemPriceInput.classList.remove('is-invalid');
                        }, 2000);
                    });
            });
        });
    </script>
}
