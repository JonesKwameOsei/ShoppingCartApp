@model ShoppingCartApp.Models.Item

@{
    ViewData["Title"] = "Add to Cart";
}

<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1>
            <i class="bi bi-cart-plus"></i> Add Item to Cart
        </h1>
    </div>

    @if (ViewData.ModelState.ErrorCount > 0)
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            <strong><i class="bi bi-exclamation-triangle"></i> Error!</strong>
            <ul class="mb-0 mt-2">
                @foreach (var error in ViewData.ModelState.Values.SelectMany(v => v.Errors))
                {
                    <li>@error.ErrorMessage</li>
                }
            </ul>
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    <div class="row">
        <div class="col-md-6">
            <div class="card shadow-sm">
                <div class="card-header bg-primary text-white">
                    <h5 class="mb-0"><i class="bi bi-plus-circle"></i> New Cart Item</h5>
                </div>
                <div class="card-body">
                    <form asp-action="Create" method="post" id="createItemForm">
                        @Html.AntiForgeryToken()
                        <input type="hidden" asp-for="Id" />

                        <div class="form-group mb-3">
                            <label asp-for="ProductId" class="form-label">
                                <i class="bi bi-box-seam"></i> Product <span class="text-danger">*</span>
                            </label>
                            <select asp-for="ProductId"
                                    class="form-select"
                                    asp-items="@(ViewData["ProductId"] as SelectList)"
                                    id="productDropdown"
                                    required>
                                <option value="">-- Select Product --</option>
                            </select>
                            <span asp-validation-for="ProductId" class="text-danger"></span>
                        </div>

                        <div class="form-group mb-3">
                            <label asp-for="Name" class="form-label">
                                <i class="bi bi-tag"></i> Item Name <span class="text-danger">*</span>
                            </label>
                            <input asp-for="Name" class="form-control" id="itemName" />
                            <span asp-validation-for="Name" class="text-danger"></span>
                        </div>

                        <div class="form-group mb-3">
                            <label asp-for="Price" class="form-label">
                                <i class="bi bi-currency-pound"></i> Price <span class="text-danger">*</span>
                            </label>
                            <div class="input-group">
                                <span class="input-group-text">£</span>
                                <input type="number"
                                       name="Price"
                                       id="itemPrice"
                                       class="form-control"
                                       step="0.01"
                                       min="0.01"
                                       placeholder="Select product first"
                                       readonly />
                            </div>
                            <span asp-validation-for="Price" class="text-danger"></span>
                        </div>

                        <div class="form-group mb-3">
                            <label asp-for="Quantity" class="form-label">
                                <i class="bi bi-123"></i> Quantity <span class="text-danger">*</span>
                            </label>
                            <input asp-for="Quantity"
                                   class="form-control"
                                   type="number"
                                   min="1" />
                            <span asp-validation-for="Quantity" class="text-danger"></span>
                        </div>

                        <div class="alert alert-info" role="alert">
                            <i class="bi bi-info-circle me-2"></i>
                            <small>Please select a product to automatically populate the name and price fields.</small>
                        </div>

                        <div class="d-flex gap-2 mt-4">
                            <button type="submit" class="btn btn-primary" id="submitBtn">
                                <i class="bi bi-cart-plus"></i> Add to Cart
                            </button>
                            <a asp-action="Index" class="btn btn-secondary">
                                <i class="bi bi-list"></i> Back to List
                            </a>
                            <a asp-controller="Home" asp-action="Index" class="btn btn-outline-secondary">
                                <i class="bi bi-house"></i> Back to Home
                            </a>
                        </div>
                    </form>
                </div>
            </div>
        </div>

        <div class="col-md-6">
            <div class="card shadow-sm" id="productPreview" style="display: none;">
                <div class="card-header bg-secondary text-white">
                    <h5 class="mb-0"><i class="bi bi-image"></i> Product Preview</h5>
                </div>
                <div class="card-body text-center">
                    <img id="productImage"
                         src=""
                         alt="Product"
                         class="img-fluid rounded mb-3"
                         style="max-height: 300px; object-fit: contain;" />
                    <h6 id="productName" class="text-muted"></h6>
                    <p id="productPrice" class="text-primary fs-5"></p>
                </div>
            </div>

            <div class="alert alert-info mt-3" id="loadingAlert" style="display: none;">
                <div class="d-flex align-items-center">
                    <div class="spinner-border spinner-border-sm me-2" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <span>Loading product details...</span>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const productDropdown = document.getElementById('productDropdown');
            const itemNameInput = document.getElementById('itemName');
            const itemPriceInput = document.getElementById('itemPrice');
            const productPreview = document.getElementById('productPreview');
            const productImage = document.getElementById('productImage');
            const productName = document.getElementById('productName');
            const productPrice = document.getElementById('productPrice');
            const loadingAlert = document.getElementById('loadingAlert');
            const submitBtn = document.getElementById('submitBtn');
            const createItemForm = document.getElementById('createItemForm');

            // Disable submit button until product is selected
            submitBtn.disabled = true;

            // Form submission handler
            createItemForm.addEventListener('submit', function(e) {
                const productId = productDropdown.value;
                const name = itemNameInput.value.trim();
                const price = parseFloat(itemPriceInput.value);
                const quantity = parseInt(document.querySelector('input[name="Quantity"]').value);

                if (!productId || !name || !price || !quantity || price <= 0) {
                    e.preventDefault();
                    showToast('Please select a product and fill in all required fields', 'error');
                    return false;
                }

                // Show loading state on button
                submitBtn.disabled = true;
                submitBtn.innerHTML = '<span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>Adding to Cart...';
            });

            productDropdown.addEventListener('change', function() {
                const selectedProductId = this.value;

                if (selectedProductId === '') {
                    itemNameInput.value = '';
                    itemPriceInput.value = '';
                    productPreview.style.display = 'none';
                    loadingAlert.style.display = 'none';
                    submitBtn.disabled = true;
                    return;
                }

                loadingAlert.style.display = 'block';
                itemPriceInput.value = '';
                itemNameInput.value = '';
                productPreview.style.display = 'none';
                submitBtn.disabled = true;

                fetch(`/Items/GetProductDetails/${selectedProductId}`)
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Product not found');
                        }
                        return response.json();
                    })
                    .then(data => {
                        loadingAlert.style.display = 'none';

                        // Populate form fields
                        itemNameInput.value = data.productName;
                        itemPriceInput.value = data.price.toFixed(2);

                        // Enable submit button
                        submitBtn.disabled = false;

                        // Show product preview
                        if (data.productImage) {
                            productImage.src = data.productImage;
                            productImage.alt = data.productName;
                            productName.textContent = data.productName;
                            productPrice.textContent = '£' + data.price.toFixed(2);
                            productPreview.style.display = 'block';
                        }

                        // Add success feedback
                        itemPriceInput.classList.add('is-valid');
                        itemNameInput.classList.add('is-valid');

                        setTimeout(() => {
                            itemPriceInput.classList.remove('is-valid');
                            itemNameInput.classList.remove('is-valid');
                        }, 2000);

                        showToast('Product loaded successfully!', 'success');
                    })
                    .catch(error => {
                        console.error('Error fetching product details:', error);
                        loadingAlert.style.display = 'none';
                        itemNameInput.value = '';
                        itemPriceInput.value = '';
                        productPreview.style.display = 'none';
                        submitBtn.disabled = true;

                        showToast('Unable to load product details. Please try again.', 'error');
                    });
            });

            function showToast(message, type) {
                const toastClass = type === 'success' ? 'alert-success' : 'alert-danger';
                const iconClass = type === 'success' ? 'bi-check-circle' : 'bi-exclamation-circle';

                const toast = document.createElement('div');
                toast.className = `alert ${toastClass} alert-dismissible fade show position-fixed top-0 end-0 m-3`;
                toast.style.zIndex = '9999';
                toast.style.minWidth = '300px';
                toast.innerHTML = `
                    <i class="bi ${iconClass} me-2"></i>${message}
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                `;
                document.body.appendChild(toast);

                setTimeout(() => {
                    toast.remove();
                }, 4000);
            }
        });
    </script>
}